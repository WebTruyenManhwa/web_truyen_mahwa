require 'rufus-scheduler'
require_relative '../../app/services/scheduler_service'

# Kh·ªüi t·∫°o scheduler n·∫øu kh√¥ng ph·∫£i m√¥i tr∆∞·ªùng test v√† kh√¥ng ph·∫£i console
if !defined?(Rails::Console) && Rails.env != 'test'
  # T·ª± ƒë·ªông x√≥a scheduler locks khi kh·ªüi ƒë·ªông server
  begin
    if ActiveRecord::Base.connection.table_exists?('scheduler_locks')
      count = ActiveRecord::Base.connection.execute("DELETE FROM scheduler_locks").cmd_tuples
      Rails.logger.info "‚úÖ T·ª± ƒë·ªông x√≥a #{count} scheduler locks khi kh·ªüi ƒë·ªông server"
    end
  rescue => e
    Rails.logger.error "‚ùå L·ªói khi x√≥a scheduler locks: #{e.message}"
  end

  # C·∫•u h√¨nh connection pool
  begin
    # TƒÉng timeout cho connection pool
    ActiveRecord::Base.connection_pool.instance_variable_set(:@timeout, 10)

    # TƒÉng k√≠ch th∆∞·ªõc pool n·∫øu c·∫ßn
    current_pool_size = ActiveRecord::Base.connection_pool.size
    if current_pool_size < 10
      Rails.logger.info "‚ö†Ô∏è Connection pool size hi·ªán t·∫°i (#{current_pool_size}) c√≥ th·ªÉ qu√° nh·ªè cho scheduler"
    end

    Rails.logger.info "üîÑ Connection pool: size=#{ActiveRecord::Base.connection_pool.size}, timeout=#{ActiveRecord::Base.connection_pool.instance_variable_get(:@timeout)}s"
  rescue => e
    Rails.logger.error "‚ùå L·ªói khi c·∫•u h√¨nh connection pool: #{e.message}"
  end

  # Log ƒë·ªÉ ki·ªÉm tra scheduler kh·ªüi ƒë·ªông
  Rails.logger.info "üîÑ Attempting to initialize scheduler in process #{Process.pid}"

  # ƒê·∫£m b·∫£o ch·ªâ c√≥ m·ªôt instance c·ªßa Rails kh·ªüi t·∫°o scheduler
  # S·ª≠ d·ª•ng database lock thay v√¨ file lock
  begin
    # T·∫°o b·∫£n ghi scheduler_lock n·∫øu ch∆∞a t·ªìn t·∫°i
    unless ActiveRecord::Base.connection.table_exists?('scheduler_locks')
      Rails.logger.info "üìä Creating scheduler_locks table"
      ActiveRecord::Base.connection.create_table(:scheduler_locks) do |t|
        t.string :name, null: false
        t.integer :process_id, null: false
        t.datetime :locked_at, null: false
        t.datetime :heartbeat_at
        t.index :name, unique: true
      end
    end

    # Ki·ªÉm tra v√† x√≥a lock c≈© n·∫øu process kh√¥ng c√≤n t·ªìn t·∫°i
    begin
      lock_record = ActiveRecord::Base.connection.execute(
        "SELECT process_id, locked_at FROM scheduler_locks WHERE name = 'main_scheduler'"
      ).first

      if lock_record
        old_pid = lock_record['process_id']
        locked_at = lock_record['locked_at']

        # Ki·ªÉm tra xem process c≈© c√≥ c√≤n ho·∫°t ƒë·ªông kh√¥ng
        process_exists = begin
                           Process.kill(0, old_pid)
                           true
                         rescue Errno::ESRCH
                           false
                         rescue
                           true
                         end

        # Ki·ªÉm tra th·ªùi gian lock, n·∫øu qu√° 5 ph√∫t m√† kh√¥ng c√≥ heartbeat th√¨ coi nh∆∞ stale
        lock_stale = Time.current - locked_at > 5.minutes

        if !process_exists || lock_stale
          Rails.logger.info "üßπ Removing stale scheduler lock from process #{old_pid} (exists: #{process_exists}, stale: #{lock_stale})"
          ActiveRecord::Base.connection.execute(
            "DELETE FROM scheduler_locks WHERE name = 'main_scheduler' AND process_id = #{old_pid}"
          )
        end
      end
    rescue => e
      Rails.logger.error "Error checking stale locks: #{e.message}"
    end

    # Th·ª≠ l·∫•y kh√≥a b·∫±ng c√°ch insert m·ªôt b·∫£n ghi m·ªõi
    # N·∫øu ƒë√£ t·ªìn t·∫°i, s·∫Ω g√¢y ra l·ªói unique constraint
    ActiveRecord::Base.connection.execute(
      "INSERT INTO scheduler_locks (name, process_id, locked_at) VALUES ('main_scheduler', #{Process.pid}, NOW())"
    )

    # N·∫øu ƒë·∫øn ƒë√¢y th√¨ ƒë√£ l·∫•y ƒë∆∞·ª£c kh√≥a
    Rails.logger.info "üîí Acquired scheduler lock for process #{Process.pid}"

    # ƒêƒÉng k√Ω hook ƒë·ªÉ x√≥a kh√≥a khi ·ª©ng d·ª•ng t·∫Øt
    at_exit do
      begin
        ActiveRecord::Base.connection.execute(
          "DELETE FROM scheduler_locks WHERE name = 'main_scheduler' AND process_id = #{Process.pid}"
        )
        Rails.logger.info "üîì Released scheduler lock on exit"
      rescue => e
        Rails.logger.error "Error releasing scheduler lock: #{e.message}"
      end
    end

    # Kh·ªüi t·∫°o scheduler
    Rails.logger.info "‚úÖ Initializing scheduler in process #{Process.pid}"
    scheduler = SchedulerService.initialize_scheduler

    # Th√™m m·ªôt job ƒë·ªÉ c·∫≠p nh·∫≠t heartbeat ƒë·ªãnh k·ª≥
    scheduler.every '30s' do
      begin
        # C·∫≠p nh·∫≠t heartbeat
        ActiveRecord::Base.connection.execute(
          "UPDATE scheduler_locks SET heartbeat_at = NOW() WHERE name = 'main_scheduler' AND process_id = #{Process.pid}"
        )
      rescue => e
        Rails.logger.error "Error updating scheduler heartbeat: #{e.message}"
      end
    end

    # Th√™m m·ªôt job ƒë·ªÉ ki·ªÉm tra xem kh√≥a c√≥ c√≤n thu·ªôc v·ªÅ process hi·ªán t·∫°i kh√¥ng
    scheduler.every '1m' do
      begin
        # Ki·ªÉm tra xem kh√≥a c√≥ c√≤n thu·ªôc v·ªÅ process hi·ªán t·∫°i kh√¥ng
        result = ActiveRecord::Base.connection.execute(
          "SELECT process_id FROM scheduler_locks WHERE name = 'main_scheduler'"
        ).first

        if result.nil?
          # N·∫øu kh√¥ng t√¨m th·∫•y kh√≥a, th·ª≠ l·∫•y l·∫°i
          begin
            ActiveRecord::Base.connection.execute(
              "INSERT INTO scheduler_locks (name, process_id, locked_at) VALUES ('main_scheduler', #{Process.pid}, NOW())"
            )
            Rails.logger.info "üîí Re-acquired scheduler lock for process #{Process.pid}"
          rescue
            # N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c kh√≥a, d·ª´ng scheduler
            Rails.logger.info "üõë Could not re-acquire lock, stopping scheduler in process #{Process.pid}"
            scheduler.shutdown
          end
        elsif result['process_id'] != Process.pid
          # N·∫øu kh√≥a thu·ªôc v·ªÅ process kh√°c, d·ª´ng scheduler
          Rails.logger.info "üõë Lock owned by process #{result['process_id']}, stopping scheduler in process #{Process.pid}"
          scheduler.shutdown
        end
      rescue => e
        Rails.logger.error "Error checking scheduler lock: #{e.message}"
      end
    end
  rescue ActiveRecord::RecordNotUnique, PG::UniqueViolation
    # Kh√≥a ƒë√£ t·ªìn t·∫°i, m·ªôt instance kh√°c ƒë√£ kh·ªüi t·∫°o scheduler
    Rails.logger.info "‚ö†Ô∏è Scheduler already initialized in another process"

    # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ process ƒëang gi·ªØ kh√≥a
    begin
      lock_info = ActiveRecord::Base.connection.execute(
        "SELECT process_id, locked_at, heartbeat_at FROM scheduler_locks WHERE name = 'main_scheduler'"
      ).first

      if lock_info
        Rails.logger.info "‚ÑπÔ∏è Lock held by process #{lock_info['process_id']} since #{lock_info['locked_at']}, last heartbeat: #{lock_info['heartbeat_at'] || 'none'}"
        Rails.logger.info "üí° To clear stale locks, run: rake scheduler:clear_locks"
      end
    rescue => e
      Rails.logger.error "Error getting lock info: #{e.message}"
    end
  rescue => e
    Rails.logger.error "‚ùå Error initializing scheduler: #{e.message}"
  end
end
